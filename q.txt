import boto3

def lambda_handler(event, context):
    try:
        # ① インスタンスIDとCloudWatchアラームを定義
        instance_ids = ["i-1", "i-2"]
        cloudwatch_alarms = ["alarm-1", "alarm-2"]
        
        # AWSのクライアントを作成
        ec2_client = boto3.client('ec2')
        cloudwatch_client = boto3.client('cloudwatch')
        
        # ② インスタンスのタグを取得して、Server:ACTのインスタンスを停止
        for instance_id in instance_ids:
            response = ec2_client.describe_instances(InstanceIds=[instance_id])
            if 'Reservations' in response and response['Reservations']:
                instance = response['Reservations'][0]['Instances'][0]
                for tag in instance['Tags']:
                    if tag['Key'] == 'Server' and tag['Value'] == 'ACT':
                        # インスタンスを停止
                        ec2_client.stop_instances(InstanceIds=[instance_id])
                        # ① インスタンスが "stopped" になるまで待機
                        while True:
                            response = ec2_client.describe_instances(InstanceIds=[instance_id])
                            if 'Reservations' in response and response['Reservations']:
                                instance = response['Reservations'][0]['Instances'][0]
                                if instance['State']['Name'] == 'stopped':
                                    break
                                # ウェイトやリトライロジックを追加できます
        
        # ④ タグ名Server:STBのインスタンスを起動後、CloudWatchアラームのステータスを確認
        for instance_id in instance_ids:
            response = ec2_client.describe_instances(InstanceIds=[instance_id])
            if 'Reservations' in response and response['Reservations']:
                instance = response['Reservations'][0]['Instances'][0]
                for tag in instance['Tags']:
                    if tag['Key'] == 'Server' and tag['Value'] == 'STB':
                        # インスタンスを起動
                        ec2_client.start_instances(InstanceIds=[instance_id])
                        # ③ インスタンスが "running" になるまで待機
                        while True:
                            response = ec2_client.describe_instances(InstanceIds=[instance_id])
                            if 'Reservations' in response and response['Reservations']:
                                instance = response['Reservations'][0]['Instances'][0]
                                if instance['State']['Name'] == 'running':
                                    break
                                # ウェイトやリトライロジックを追加できます
        
        # ③ "StateValue: OK" になるまでアラームのステータスを確認
        for alarm_name in cloudwatch_alarms:
            while True:
                alarm_status = cloudwatch_client.describe_alarms(AlarmNames=[alarm_name])
                if alarm_status['MetricAlarms'][0]['StateValue'] == 'OK':
                    break
                # ウェイトやリトライロジックを追加できます
        
        # ⑤ タグ名を差し替え
        for instance_id in instance_ids:
            response = ec2_client.describe_instances(InstanceIds=[instance_id])
            if 'Reservations' in response and response['Reservations']:
                instance = response['Reservations'][0]['Instances'][0]
                for tag in instance['Tags']:
                    if tag['Key'] == 'Server':
                        if tag['Value'] == 'ACT':
                            # インスタンスのタグをServer:STBに変更
                            ec2_client.create_tags(Resources=[instance_id], Tags=[{'Key': 'Server', 'Value': 'STB'}])
                        elif tag['Value'] == 'STB':
                            # インスタンスのタグをServer:ACTに変更
                            ec2_client.create_tags(Resources=[instance_id], Tags=[{'Key': 'Server', 'Value': 'ACT'}])
    
        return {
            'statusCode': 200,
            'body': 'Lambda function executed successfully'
        }
    except Exception as e:
        # エラーログを出力
        print(f"An error occurred: {str(e)}")
        return {
            'statusCode': 500,
            'body': 'Lambda function encountered an error'
        }
