import boto3

ec2_client = boto3.client('ec2')
elbv2_client = boto3.client('elbv2')

def lambda_handler(event, context):
    # 2つの事前に定義されたEC2インスタンスのIDを指定
    existing_instance_id_1 = 'i-EXISTING_INSTANCE_ID_1'
    existing_instance_id_2 = 'i-EXISTING_INSTANCE_ID_2'

    # ターゲットグループのARNを指定
    target_group_arn = 'arn:aws:elasticloadbalancing:REGION:ACCOUNT_ID:targetgroup/TARGETGROUP_NAME/1234567890abcdef0'

    # ターゲットグループに登録されているEC2インスタンスを取得
    targets = elbv2_client.describe_target_health(TargetGroupArn=target_group_arn)['TargetHealthDescriptions']

    # 事前に定義された2つのEC2インスタンスのうち、ターゲットグループに登録されていないインスタンスを特定
    registered_instance_ids = {target['Target']['Id'] for target in targets}
    instances_to_start = [instance_id for instance_id in [existing_instance_id_1, existing_instance_id_2] if instance_id not in registered_instance_ids]

    # 登録されていないEC2インスタンスを起動してターゲットグループに登録
    for instance_id_to_start in instances_to_start:
        ec2_client.start_instances(InstanceIds=[instance_id_to_start])
        ec2_client.get_waiter('instance_running').wait(InstanceIds=[instance_id_to_start])
        elbv2_client.register_targets(TargetGroupArn=target_group_arn, Targets=[{'Id': instance_id_to_start}])

    # 新しいインスタンスが登録された後に、古いインスタンスの登録解除を行う
    for target in targets:
        instance_id = target['Target']['Id']
        if instance_id not in instances_to_start:
            elbv2_client.deregister_targets(TargetGroupArn=target_group_arn, Targets=[{'Id': instance_id}])
            ec2_client.stop_instances(InstanceIds=[instance_id])
            ec2_client.get_waiter('instance_stopped').wait(InstanceIds=[instance_id])

    return {
        'statusCode': 200,
        'body': 'EC2の自動フェイルオーバーが実行されました。'
    }
