import boto3

def lambda_handler(event, context):
    # 削除対象のRDSクラスターとライターインスタンスの識別子を指定します
    cluster_identifier = 'deleteme-writer-only'
    writer_instance_identifier = 'instance-2130'

    # AWSリージョンを指定します
    region = 'us-east-1'  # クラスターが存在するリージョンに合わせて変更してください

    # Boto3のRDSクラスタークライアントを作成します
    rds_client = boto3.client('rds', region_name=region)

    try:
        # ライターインスタンスを削除します
        response = rds_client.delete_db_instance(
            DBInstanceIdentifier=writer_instance_identifier
        )

        # ライターインスタンスの削除が正常に完了した場合
        if response['DBInstance']['DBInstanceStatus'] == 'deleting':
            # クラスターを削除します
            response = rds_client.delete_db_cluster(
                DBClusterIdentifier=cluster_identifier,
                SkipFinalSnapshot=True,
                DeleteAutomatedBackups=True
            )

            # クラスターの削除が正常に完了した場合
            if response['DBCluster']['Status'] == 'available':
                return {
                    'statusCode': 200,
                    'body': f"RDSクラスター {cluster_identifier} とライターインスタンス {writer_instance_identifier} を削除しました。"
                }
            else:
                return {
                    'statusCode': 500,
                    'body': f"RDSクラスターの削除中にエラーが発生しました: {response['DBCluster']['Status']}"
                }
        else:
            return {
                'statusCode': 500,
                'body': f"ライターインスタンス {writer_instance_identifier} の削除中にエラーが発生しました: {response['DBInstance']['DBInstanceStatus']}"
            }
    except Exception as e:
        # エラーメッセージを返します
        return {
            'statusCode': 500,
            'body': f"削除中にエラーが発生しました: {str(e)}"
        }
