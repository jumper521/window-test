import boto3
import time

# AWSリージョン、アプリケーション名、デプロイメントグループ名、タグキーを指定
aws_region = 'YOUR_AWS_REGION'
application_name = 'YourApplicationName'
deployment_group_name = 'YourDeploymentGroupName'
tag_key = 'YourTagKey'

# 既存のEC2インスタンスのIDを指定
existing_instance_ids = ['i-XXXXXXXXXXXX', 'i-YYYYYYYYYYYY']

ec2 = boto3.client('ec2', region_name=aws_region)
codedeploy_client = boto3.client('codedeploy', region_name=aws_region)

def get_instance_name(instance_id):
    response = ec2.describe_instances(InstanceIds=[instance_id])
    name_tag = None
    for reservation in response['Reservations']:
        for instance in reservation['Instances']:
            tags = instance.get('Tags', [])
            for tag in tags:
                if tag['Key'] == 'Name':
                    name_tag = tag['Value']
                    break
            if name_tag:
                break
    return name_tag

def start_existing_ec2_instances(instance_ids):
    for instance_id in instance_ids:
        # 停止中のEC2インスタンスを起動
        ec2.start_instances(InstanceIds=[instance_id])
        print(f'Starting EC2 instance {instance_id}')

        # インスタンスが実行中になるのを待機
        while True:
            time.sleep(10)  # 10秒ごとにチェック
            response = ec2.describe_instances(InstanceIds=[instance_id])
            new_state = response['Reservations'][0]['Instances'][0]['State']['Name']
            if new_state == 'running':
                print(f'EC2 instance {instance_id} is now running')
                break

# 既存のEC2インスタンスを起動
start_existing_ec2_instances(existing_instance_ids)

# 既存のEC2インスタンスの Name タグを取得
name_tag_values = [get_instance_name(instance_id) for instance_id in existing_instance_ids]

# CodeDeployデプロイメントグループのタググループを更新
response = codedeploy_client.get_deployment_group(
    applicationName=application_name,
    deploymentGroupName=deployment_group_name
)

deployment_group_info = response['deploymentGroupInfo']
if 'targetGroupInfo' in deployment_group_info:
    target_group_info = deployment_group_info['targetGroupInfo']
    if tag_key in target_group_info:
        target_group_info[tag_key]['tags'] = [{ 'Key': tag_key, 'Value': name_tag_values[0] }]

# 更新されたデプロイメントグループの情報でデプロイメントグループを更新
codedeploy_client.update_deployment_group(
    applicationName=application_name,
    currentDeploymentGroupName=deployment_group_name,
    deploymentGroupName=deployment_group_name,
    deploymentConfigName='CodeDeployDefault.AllAtOnce',
    ec2TagSet={
        'ec2TagSetList': [
            {
                'ec2TagFilter': [
                    {
                        'Key': tag_key,
                        'Value': name_tag_values[0],
                    }
                ]
            }
        ]
    },
    autoScalingGroups=[],
    serviceRoleArn='arn:aws:iam::123456789012:role/YourCodeDeployServiceRole'
)

print('EC2 instance start and CodeDeploy deployment group updated successfully!')
