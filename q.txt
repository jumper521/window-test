import boto3

ec2_client = boto3.client('ec2')

def lambda_handler(event, context):
    # タグフィルタ名を指定
    tag_filter_name = 'your-tag-filter-name'

    # インスタンスを取得
    instances = ec2_client.describe_instances(
        Filters=[
            {'Name': 'tag-key', 'Values': [tag_filter_name]}
        ]
    )

    if not instances['Reservations']:
        return {
            'statusCode': 200,
            'body': '指定されたタグのインスタンスが見つかりません。'
        }

    # インスタンスのタグ情報を取得
    instance_tags = instances['Reservations'][0]['Instances'][0]['Tags']

    # タグ '1a' が存在するか確認
    tag_1a_exists = any(tag['Key'] == '1a' for tag in instance_tags)
    
    # インスタンスのIDを取得
    instance_id = instances['Reservations'][0]['Instances'][0]['InstanceId']

    if tag_1a_exists:
        # '1a' タグが存在する場合、'1c' タグのインスタンスを停止
        instances_1c = ec2_client.describe_instances(
            Filters=[
                {'Name': 'tag-key', 'Values': ['1c']}
            ]
        )

        if instances_1c['Reservations']:
            ec2_client.stop_instances(InstanceIds=[instances_1c['Reservations'][0]['Instances'][0]['InstanceId']])
    else:
        # '1c' タグが存在する場合、'1a' タグのインスタンスを停止
        instances_1a = ec2_client.describe_instances(
            Filters=[
                {'Name': 'tag-key', 'Values': ['1a']}
            ]
        )

        if instances_1a['Reservations']:
            ec2_client.stop_instances(InstanceIds=[instances_1a['Reservations'][0]['Instances'][0]['InstanceId']])

    return {
        'statusCode': 200,
        'body': 'インスタンスの停止が完了しました。'
    }
