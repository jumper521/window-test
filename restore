import boto3

def lambda_handler(event, context):
    try:
        # インスタンスIDとCloudWatchアラームを定義
        instance_ids = ["i-1", "i-2"]
        cloudwatch_alarms = ["alarm-1", "alarm-2"]
        
        # AWSのクライアントを作成
        ec2_client = boto3.client('ec2')
        cloudwatch_client = boto3.client('cloudwatch')
        
        # インスタンスのタグを変更
        for instance_id in instance_ids:
            response = ec2_client.describe_instances(InstanceIds=[instance_id])
            if 'Reservations' in response and response['Reservations']:
                instance = response['Reservations'][0]['Instances'][0]
                for tag in instance['Tags']:
                    if tag['Key'] == 'Server':
                        if tag['Value'] == 'ACT':
                            # インスタンスのタグをServer:STBに変更
                            ec2_client.create_tags(Resources=[instance_id], Tags=[{'Key': 'Server', 'Value': 'STB'}])
                        elif tag['Value'] == 'STB':
                            # インスタンスのタグをServer:ACTに変更
                            ec2_client.create_tags(Resources=[instance_id], Tags=[{'Key': 'Server', 'Value': 'ACT'}])
        
        # CloudWatchアラームのタグを変更
        for alarm_name in cloudwatch_alarms:
            response = cloudwatch_client.describe_alarms(AlarmNames=[alarm_name])
            if 'MetricAlarms' in response and response['MetricAlarms']:
                alarm = response['MetricAlarms'][0]
                for tag in alarm['Tags']:
                    if tag['Key'] == 'Server':
                        if tag['Value'] == 'ACT':
                            # CloudWatchアラームのタグをServer:STBに変更
                            cloudwatch_client.tag_resource(ResourceARN=alarm['AlarmArn'], Tags=[{'Key': 'Server', 'Value': 'STB'}])
                        elif tag['Value'] == 'STB':
                            # CloudWatchアラームのタグをServer:ACTに変更
                            cloudwatch_client.tag_resource(ResourceARN=alarm['AlarmArn'], Tags=[{'Key': 'Server', 'Value': 'ACT'}])
        
        return {
            'statusCode': 200,
            'body': 'Lambda function executed successfully'
        }
    except Exception as e:
        # エラーログを出力
        print(f"An error occurred: {str(e)}")
        return {
            'statusCode': 500,
            'body': 'Lambda function encountered an error'
        }
