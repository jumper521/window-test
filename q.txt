import datetime
import time
import boto3
import time

# S3バケット名の設定
s3_bucket_name = 'mys3bucketname'

# 対象となるCloudWatch Log Groupの名前と、対応するS3のプレフィックス（サブフォルダ）名
log_group_names = [
    '/aws/lambda/Function1',
    '/aws/lambda/Function2'
]

destination_prefixes = [
    'Function1',
    'Function2'
]

# 前日の0時0分0秒のタイムスタンプを取得
def get_from_timestamp():
    today = datetime.date.today()
    yesterday = datetime.datetime.combine(today - datetime.timedelta(days=1), datetime.time(0, 0, 0))
    timestamp = time.mktime(yesterday.timetuple())
    return int(timestamp)

# 前日の23時59分59秒のタイムスタンプを取得
def get_to_timestamp(from_ts):
    return from_ts + (60 * 60 * 24) - 1

# タスクのステータスをチェック
def check_task_status(client, task_id):
    while True:
        response = client.describe_export_tasks(taskId=task_id)
        status = response['exportTasks'][0]['status']['code']
        if status in ['COMPLETED', 'FAILED', 'CANCELLED']:
            return status
        time.sleep(60)

# Lambda関数のメイン処理
def lambda_handler(event, context):
    from_ts = get_from_timestamp()
    to_ts = get_to_timestamp(from_ts)
    print('Timestamp: from_ts %s, to_ts %s' % (from_ts, to_ts))

    client = boto3.client('logs')
    
    for log_group_name, destination_prefix in zip(log_group_names, destination_prefixes):
        response = client.create_export_task(
            logGroupName=log_group_name,
            fromTime=from_ts * 1000,
            to=to_ts * 1000,
            destination=s3_bucket_name,
            destinationPrefix=destination_prefix
        )
        
        task_id = response['taskId']
        print(f"Export task for {log_group_name} started with task id {task_id}")
        
        # タスクが完了するまで待つ
        status = check_task_status(client, task_id)
        print(f"Task {task_id} ended with status {status}")
